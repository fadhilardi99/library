// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  name      String
  role      Role     @default(MAHASISWA)
  nim       String?  // Untuk mahasiswa
  nip       String?  // Untuk dosen
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  loans     Loan[]
  favorites Favorite[]

  @@map("users")
}

model Book {
  id          String   @id @default(cuid())
  title       String
  author      String
  publisher   String
  year        Int
  isbn        String?  @unique
  category    String
  description String?
  coverUrl    String?
  stock       Int      @default(1)
  totalStock  Int      @default(1)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  loans     Loan[]
  favorites Favorite[]

  @@map("books")
}

model Loan {
  id         String     @id @default(cuid())
  userId     String
  bookId     String
  loanDate   DateTime   @default(now())
  dueDate    DateTime
  returnDate DateTime?
  status     LoanStatus @default(PENDING)
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@map("loans")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  bookId    String
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  book Book @relation(fields: [bookId], references: [id], onDelete: Cascade)

  // Unique constraint
  @@unique([userId, bookId])
  @@map("favorites")
}

enum Role {
  ADMIN
  DOSEN
  MAHASISWA
}

enum LoanStatus {
  PENDING     // Menunggu approval
  APPROVED    // Disetujui, belum diambil
  BORROWED    // Sedang dipinjam
  RETURNED    // Sudah dikembalikan
  REJECTED    // Ditolak
  OVERDUE     // Terlambat
}